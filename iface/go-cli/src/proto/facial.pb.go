// Code generated by protoc-gen-go. DO NOT EDIT.
// source: facial.proto

package iface_algo

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("facial.proto", fileDescriptor_4a25a01b839637da) }

var fileDescriptor_4a25a01b839637da = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x4b, 0x4c, 0xce,
	0x4c, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca, 0x4c, 0x4b, 0x4c, 0x4e, 0xd5,
	0x4b, 0xcc, 0x49, 0xcf, 0x97, 0xe2, 0x2e, 0x48, 0x2c, 0x4a, 0xcc, 0x85, 0x48, 0x18, 0x75, 0x31,
	0x71, 0xb1, 0xb9, 0x81, 0x55, 0x0a, 0x85, 0x70, 0xf1, 0x40, 0x58, 0x2e, 0xa9, 0x25, 0xa9, 0xc9,
	0x25, 0x42, 0xf2, 0x7a, 0x10, 0x4d, 0x10, 0xe5, 0xc8, 0x52, 0x01, 0x20, 0x91, 0x62, 0x29, 0x45,
	0x9c, 0x0a, 0x82, 0x52, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95, 0x18, 0x84, 0xa2, 0xb8, 0xf8,
	0x5c, 0x2b, 0x4a, 0x8a, 0x12, 0x93, 0x4b, 0xdc, 0x52, 0x13, 0x4b, 0x4a, 0x8b, 0x52, 0x85, 0x50,
	0xb5, 0xa1, 0x4a, 0x42, 0x4d, 0x56, 0xc6, 0xa3, 0x04, 0xc9, 0x6c, 0x3f, 0x2e, 0xae, 0xe0, 0xcc,
	0xdc, 0xcc, 0x9c, 0xc4, 0xa2, 0xcc, 0x92, 0x4a, 0x21, 0x59, 0x14, 0x4d, 0x08, 0x09, 0xa8, 0x99,
	0xf2, 0x38, 0xa4, 0x11, 0xe6, 0x25, 0xb1, 0x81, 0xc3, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0x75, 0xc0, 0x3a, 0xbe, 0x3c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FacialClient is the client API for Facial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FacialClient interface {
	// Detect facial regions and landmarks
	FacialDetect(ctx context.Context, in *FacialDetectParams, opts ...grpc.CallOption) (*FacialDetectResponse, error)
	// Extract feature from given image
	ExtractFeature(ctx context.Context, in *ExtractFeatureParams, opts ...grpc.CallOption) (*ExtractFeatureResponse, error)
	// Get similarity score of given features
	Similarity(ctx context.Context, in *SimilarityParams, opts ...grpc.CallOption) (*SimilarityResponse, error)
}

type facialClient struct {
	cc *grpc.ClientConn
}

func NewFacialClient(cc *grpc.ClientConn) FacialClient {
	return &facialClient{cc}
}

func (c *facialClient) FacialDetect(ctx context.Context, in *FacialDetectParams, opts ...grpc.CallOption) (*FacialDetectResponse, error) {
	out := new(FacialDetectResponse)
	err := c.cc.Invoke(ctx, "/iface.algo.Facial/FacialDetect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facialClient) ExtractFeature(ctx context.Context, in *ExtractFeatureParams, opts ...grpc.CallOption) (*ExtractFeatureResponse, error) {
	out := new(ExtractFeatureResponse)
	err := c.cc.Invoke(ctx, "/iface.algo.Facial/ExtractFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facialClient) Similarity(ctx context.Context, in *SimilarityParams, opts ...grpc.CallOption) (*SimilarityResponse, error) {
	out := new(SimilarityResponse)
	err := c.cc.Invoke(ctx, "/iface.algo.Facial/Similarity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FacialServer is the server API for Facial service.
type FacialServer interface {
	// Detect facial regions and landmarks
	FacialDetect(context.Context, *FacialDetectParams) (*FacialDetectResponse, error)
	// Extract feature from given image
	ExtractFeature(context.Context, *ExtractFeatureParams) (*ExtractFeatureResponse, error)
	// Get similarity score of given features
	Similarity(context.Context, *SimilarityParams) (*SimilarityResponse, error)
}

func RegisterFacialServer(s *grpc.Server, srv FacialServer) {
	s.RegisterService(&_Facial_serviceDesc, srv)
}

func _Facial_FacialDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FacialDetectParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacialServer).FacialDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iface.algo.Facial/FacialDetect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacialServer).FacialDetect(ctx, req.(*FacialDetectParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Facial_ExtractFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractFeatureParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacialServer).ExtractFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iface.algo.Facial/ExtractFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacialServer).ExtractFeature(ctx, req.(*ExtractFeatureParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Facial_Similarity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimilarityParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacialServer).Similarity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iface.algo.Facial/Similarity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacialServer).Similarity(ctx, req.(*SimilarityParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Facial_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iface.algo.Facial",
	HandlerType: (*FacialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FacialDetect",
			Handler:    _Facial_FacialDetect_Handler,
		},
		{
			MethodName: "ExtractFeature",
			Handler:    _Facial_ExtractFeature_Handler,
		},
		{
			MethodName: "Similarity",
			Handler:    _Facial_Similarity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "facial.proto",
}
