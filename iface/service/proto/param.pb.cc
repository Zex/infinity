// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: param.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "param.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace iface {
namespace param {
class ExtractFeatureParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExtractFeatureParams> {
} _ExtractFeatureParams_default_instance_;
class ExtractFeatureResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ExtractFeatureResponse> {
} _ExtractFeatureResponse_default_instance_;
class FacialDetectParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FacialDetectParams> {
} _FacialDetectParams_default_instance_;
class PointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point> {
} _Point_default_instance_;
class RegionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Region> {
} _Region_default_instance_;
class LandmarkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Landmark> {
} _Landmark_default_instance_;
class FacialDetectResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FacialDetectResponse> {
} _FacialDetectResponse_default_instance_;
class SimilarityParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SimilarityParams> {
} _SimilarityParams_default_instance_;
class SimilarityResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SimilarityResponse> {
} _SimilarityResponse_default_instance_;

namespace protobuf_param_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractFeatureParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractFeatureParams, url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractFeatureResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtractFeatureResponse, feat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialDetectParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialDetectParams, url_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Region, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Landmark, pts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialDetectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialDetectResponse, regions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacialDetectResponse, landmarks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarityParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarityParams, feat1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarityParams, feat2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimilarityResponse, score_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ExtractFeatureParams)},
  { 6, -1, sizeof(ExtractFeatureResponse)},
  { 12, -1, sizeof(FacialDetectParams)},
  { 18, -1, sizeof(Point)},
  { 25, -1, sizeof(Region)},
  { 34, -1, sizeof(Landmark)},
  { 40, -1, sizeof(FacialDetectResponse)},
  { 47, -1, sizeof(SimilarityParams)},
  { 54, -1, sizeof(SimilarityResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExtractFeatureParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ExtractFeatureResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FacialDetectParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Region_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Landmark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FacialDetectResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimilarityParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SimilarityResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "param.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _ExtractFeatureParams_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ExtractFeatureResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _FacialDetectParams_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Point_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Region_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Landmark_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _FacialDetectResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SimilarityParams_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _SimilarityResponse_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ExtractFeatureParams_default_instance_.DefaultConstruct();
  _ExtractFeatureResponse_default_instance_.DefaultConstruct();
  _FacialDetectParams_default_instance_.DefaultConstruct();
  _Point_default_instance_.DefaultConstruct();
  _Region_default_instance_.DefaultConstruct();
  _Landmark_default_instance_.DefaultConstruct();
  _FacialDetectResponse_default_instance_.DefaultConstruct();
  _SimilarityParams_default_instance_.DefaultConstruct();
  _SimilarityResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013param.proto\022\013iface.param\"#\n\024ExtractFea"
      "tureParams\022\013\n\003url\030\001 \001(\t\"&\n\026ExtractFeatur"
      "eResponse\022\014\n\004feat\030\001 \001(\t\"!\n\022FacialDetectP"
      "arams\022\013\n\003url\030\001 \001(\t\"\035\n\005Point\022\t\n\001x\030\001 \001(\005\022\t"
      "\n\001y\030\002 \001(\005\"=\n\006Region\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001("
      "\005\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\"+\n\010Land"
      "mark\022\037\n\003pts\030\001 \003(\0132\022.iface.param.Point\"f\n"
      "\024FacialDetectResponse\022$\n\007regions\030\001 \003(\0132\023"
      ".iface.param.Region\022(\n\tlandmarks\030\002 \003(\0132\025"
      ".iface.param.Landmark\"0\n\020SimilarityParam"
      "s\022\r\n\005feat1\030\001 \001(\t\022\r\n\005feat2\030\002 \001(\t\"#\n\022Simil"
      "arityResponse\022\r\n\005score\030\001 \001(\002B\035\n\017com.ifac"
      "e.paramB\nParametersb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 507);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "param.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_param_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtractFeatureParams::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtractFeatureParams::ExtractFeatureParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_param_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iface.param.ExtractFeatureParams)
}
ExtractFeatureParams::ExtractFeatureParams(const ExtractFeatureParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:iface.param.ExtractFeatureParams)
}

void ExtractFeatureParams::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ExtractFeatureParams::~ExtractFeatureParams() {
  // @@protoc_insertion_point(destructor:iface.param.ExtractFeatureParams)
  SharedDtor();
}

void ExtractFeatureParams::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExtractFeatureParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtractFeatureParams::descriptor() {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExtractFeatureParams& ExtractFeatureParams::default_instance() {
  protobuf_param_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExtractFeatureParams* ExtractFeatureParams::New(::google::protobuf::Arena* arena) const {
  ExtractFeatureParams* n = new ExtractFeatureParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtractFeatureParams::Clear() {
// @@protoc_insertion_point(message_clear_start:iface.param.ExtractFeatureParams)
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ExtractFeatureParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iface.param.ExtractFeatureParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "iface.param.ExtractFeatureParams.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iface.param.ExtractFeatureParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iface.param.ExtractFeatureParams)
  return false;
#undef DO_
}

void ExtractFeatureParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iface.param.ExtractFeatureParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iface.param.ExtractFeatureParams.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // @@protoc_insertion_point(serialize_end:iface.param.ExtractFeatureParams)
}

::google::protobuf::uint8* ExtractFeatureParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iface.param.ExtractFeatureParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iface.param.ExtractFeatureParams.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iface.param.ExtractFeatureParams)
  return target;
}

size_t ExtractFeatureParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iface.param.ExtractFeatureParams)
  size_t total_size = 0;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtractFeatureParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iface.param.ExtractFeatureParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtractFeatureParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExtractFeatureParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iface.param.ExtractFeatureParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iface.param.ExtractFeatureParams)
    MergeFrom(*source);
  }
}

void ExtractFeatureParams::MergeFrom(const ExtractFeatureParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iface.param.ExtractFeatureParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void ExtractFeatureParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iface.param.ExtractFeatureParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtractFeatureParams::CopyFrom(const ExtractFeatureParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iface.param.ExtractFeatureParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractFeatureParams::IsInitialized() const {
  return true;
}

void ExtractFeatureParams::Swap(ExtractFeatureParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtractFeatureParams::InternalSwap(ExtractFeatureParams* other) {
  url_.Swap(&other->url_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtractFeatureParams::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtractFeatureParams

// string url = 1;
void ExtractFeatureParams::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExtractFeatureParams::url() const {
  // @@protoc_insertion_point(field_get:iface.param.ExtractFeatureParams.url)
  return url_.GetNoArena();
}
void ExtractFeatureParams::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iface.param.ExtractFeatureParams.url)
}
#if LANG_CXX11
void ExtractFeatureParams::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iface.param.ExtractFeatureParams.url)
}
#endif
void ExtractFeatureParams::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iface.param.ExtractFeatureParams.url)
}
void ExtractFeatureParams::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iface.param.ExtractFeatureParams.url)
}
::std::string* ExtractFeatureParams::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:iface.param.ExtractFeatureParams.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExtractFeatureParams::release_url() {
  // @@protoc_insertion_point(field_release:iface.param.ExtractFeatureParams.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExtractFeatureParams::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:iface.param.ExtractFeatureParams.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExtractFeatureResponse::kFeatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExtractFeatureResponse::ExtractFeatureResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_param_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iface.param.ExtractFeatureResponse)
}
ExtractFeatureResponse::ExtractFeatureResponse(const ExtractFeatureResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.feat().size() > 0) {
    feat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feat_);
  }
  // @@protoc_insertion_point(copy_constructor:iface.param.ExtractFeatureResponse)
}

void ExtractFeatureResponse::SharedCtor() {
  feat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ExtractFeatureResponse::~ExtractFeatureResponse() {
  // @@protoc_insertion_point(destructor:iface.param.ExtractFeatureResponse)
  SharedDtor();
}

void ExtractFeatureResponse::SharedDtor() {
  feat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExtractFeatureResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtractFeatureResponse::descriptor() {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExtractFeatureResponse& ExtractFeatureResponse::default_instance() {
  protobuf_param_2eproto::InitDefaults();
  return *internal_default_instance();
}

ExtractFeatureResponse* ExtractFeatureResponse::New(::google::protobuf::Arena* arena) const {
  ExtractFeatureResponse* n = new ExtractFeatureResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtractFeatureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iface.param.ExtractFeatureResponse)
  feat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ExtractFeatureResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iface.param.ExtractFeatureResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string feat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feat()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feat().data(), this->feat().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "iface.param.ExtractFeatureResponse.feat"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iface.param.ExtractFeatureResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iface.param.ExtractFeatureResponse)
  return false;
#undef DO_
}

void ExtractFeatureResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iface.param.ExtractFeatureResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string feat = 1;
  if (this->feat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feat().data(), this->feat().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iface.param.ExtractFeatureResponse.feat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->feat(), output);
  }

  // @@protoc_insertion_point(serialize_end:iface.param.ExtractFeatureResponse)
}

::google::protobuf::uint8* ExtractFeatureResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iface.param.ExtractFeatureResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string feat = 1;
  if (this->feat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feat().data(), this->feat().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iface.param.ExtractFeatureResponse.feat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->feat(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iface.param.ExtractFeatureResponse)
  return target;
}

size_t ExtractFeatureResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iface.param.ExtractFeatureResponse)
  size_t total_size = 0;

  // string feat = 1;
  if (this->feat().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feat());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtractFeatureResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iface.param.ExtractFeatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtractFeatureResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExtractFeatureResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iface.param.ExtractFeatureResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iface.param.ExtractFeatureResponse)
    MergeFrom(*source);
  }
}

void ExtractFeatureResponse::MergeFrom(const ExtractFeatureResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iface.param.ExtractFeatureResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feat().size() > 0) {

    feat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feat_);
  }
}

void ExtractFeatureResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iface.param.ExtractFeatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtractFeatureResponse::CopyFrom(const ExtractFeatureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iface.param.ExtractFeatureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtractFeatureResponse::IsInitialized() const {
  return true;
}

void ExtractFeatureResponse::Swap(ExtractFeatureResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtractFeatureResponse::InternalSwap(ExtractFeatureResponse* other) {
  feat_.Swap(&other->feat_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtractFeatureResponse::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtractFeatureResponse

// string feat = 1;
void ExtractFeatureResponse::clear_feat() {
  feat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ExtractFeatureResponse::feat() const {
  // @@protoc_insertion_point(field_get:iface.param.ExtractFeatureResponse.feat)
  return feat_.GetNoArena();
}
void ExtractFeatureResponse::set_feat(const ::std::string& value) {
  
  feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iface.param.ExtractFeatureResponse.feat)
}
#if LANG_CXX11
void ExtractFeatureResponse::set_feat(::std::string&& value) {
  
  feat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iface.param.ExtractFeatureResponse.feat)
}
#endif
void ExtractFeatureResponse::set_feat(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iface.param.ExtractFeatureResponse.feat)
}
void ExtractFeatureResponse::set_feat(const char* value, size_t size) {
  
  feat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iface.param.ExtractFeatureResponse.feat)
}
::std::string* ExtractFeatureResponse::mutable_feat() {
  
  // @@protoc_insertion_point(field_mutable:iface.param.ExtractFeatureResponse.feat)
  return feat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ExtractFeatureResponse::release_feat() {
  // @@protoc_insertion_point(field_release:iface.param.ExtractFeatureResponse.feat)
  
  return feat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ExtractFeatureResponse::set_allocated_feat(::std::string* feat) {
  if (feat != NULL) {
    
  } else {
    
  }
  feat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feat);
  // @@protoc_insertion_point(field_set_allocated:iface.param.ExtractFeatureResponse.feat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FacialDetectParams::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FacialDetectParams::FacialDetectParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_param_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iface.param.FacialDetectParams)
}
FacialDetectParams::FacialDetectParams(const FacialDetectParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.url().size() > 0) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:iface.param.FacialDetectParams)
}

void FacialDetectParams::SharedCtor() {
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FacialDetectParams::~FacialDetectParams() {
  // @@protoc_insertion_point(destructor:iface.param.FacialDetectParams)
  SharedDtor();
}

void FacialDetectParams::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FacialDetectParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacialDetectParams::descriptor() {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FacialDetectParams& FacialDetectParams::default_instance() {
  protobuf_param_2eproto::InitDefaults();
  return *internal_default_instance();
}

FacialDetectParams* FacialDetectParams::New(::google::protobuf::Arena* arena) const {
  FacialDetectParams* n = new FacialDetectParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FacialDetectParams::Clear() {
// @@protoc_insertion_point(message_clear_start:iface.param.FacialDetectParams)
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FacialDetectParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iface.param.FacialDetectParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "iface.param.FacialDetectParams.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iface.param.FacialDetectParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iface.param.FacialDetectParams)
  return false;
#undef DO_
}

void FacialDetectParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iface.param.FacialDetectParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iface.param.FacialDetectParams.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // @@protoc_insertion_point(serialize_end:iface.param.FacialDetectParams)
}

::google::protobuf::uint8* FacialDetectParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iface.param.FacialDetectParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1;
  if (this->url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iface.param.FacialDetectParams.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iface.param.FacialDetectParams)
  return target;
}

size_t FacialDetectParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iface.param.FacialDetectParams)
  size_t total_size = 0;

  // string url = 1;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacialDetectParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iface.param.FacialDetectParams)
  GOOGLE_DCHECK_NE(&from, this);
  const FacialDetectParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FacialDetectParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iface.param.FacialDetectParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iface.param.FacialDetectParams)
    MergeFrom(*source);
  }
}

void FacialDetectParams::MergeFrom(const FacialDetectParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iface.param.FacialDetectParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void FacialDetectParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iface.param.FacialDetectParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacialDetectParams::CopyFrom(const FacialDetectParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iface.param.FacialDetectParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacialDetectParams::IsInitialized() const {
  return true;
}

void FacialDetectParams::Swap(FacialDetectParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FacialDetectParams::InternalSwap(FacialDetectParams* other) {
  url_.Swap(&other->url_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FacialDetectParams::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FacialDetectParams

// string url = 1;
void FacialDetectParams::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FacialDetectParams::url() const {
  // @@protoc_insertion_point(field_get:iface.param.FacialDetectParams.url)
  return url_.GetNoArena();
}
void FacialDetectParams::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iface.param.FacialDetectParams.url)
}
#if LANG_CXX11
void FacialDetectParams::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iface.param.FacialDetectParams.url)
}
#endif
void FacialDetectParams::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iface.param.FacialDetectParams.url)
}
void FacialDetectParams::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iface.param.FacialDetectParams.url)
}
::std::string* FacialDetectParams::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:iface.param.FacialDetectParams.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FacialDetectParams::release_url() {
  // @@protoc_insertion_point(field_release:iface.param.FacialDetectParams.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FacialDetectParams::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:iface.param.FacialDetectParams.url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_param_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iface.param.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:iface.param.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:iface.param.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  protobuf_param_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:iface.param.Point)
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iface.param.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iface.param.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iface.param.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iface.param.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:iface.param.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iface.param.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iface.param.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iface.param.Point)
  size_t total_size = 0;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iface.param.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iface.param.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iface.param.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iface.param.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iface.param.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iface.param.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// int32 x = 1;
void Point::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:iface.param.Point.x)
  return x_;
}
void Point::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:iface.param.Point.x)
}

// int32 y = 2;
void Point::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:iface.param.Point.y)
  return y_;
}
void Point::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:iface.param.Point.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Region::kXFieldNumber;
const int Region::kYFieldNumber;
const int Region::kWidthFieldNumber;
const int Region::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Region::Region()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_param_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iface.param.Region)
}
Region::Region(const Region& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:iface.param.Region)
}

void Region::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
  _cached_size_ = 0;
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:iface.param.Region)
  SharedDtor();
}

void Region::SharedDtor() {
}

void Region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Region::descriptor() {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Region& Region::default_instance() {
  protobuf_param_2eproto::InitDefaults();
  return *internal_default_instance();
}

Region* Region::New(::google::protobuf::Arena* arena) const {
  Region* n = new Region;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:iface.param.Region)
  ::memset(&x_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
}

bool Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iface.param.Region)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iface.param.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iface.param.Region)
  return false;
#undef DO_
}

void Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iface.param.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:iface.param.Region)
}

::google::protobuf::uint8* Region::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iface.param.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iface.param.Region)
  return target;
}

size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iface.param.Region)
  size_t total_size = 0;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Region::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iface.param.Region)
  GOOGLE_DCHECK_NE(&from, this);
  const Region* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Region>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iface.param.Region)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iface.param.Region)
    MergeFrom(*source);
  }
}

void Region::MergeFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iface.param.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Region::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iface.param.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iface.param.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  return true;
}

void Region::Swap(Region* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Region::InternalSwap(Region* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Region::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Region

// int32 x = 1;
void Region::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Region::x() const {
  // @@protoc_insertion_point(field_get:iface.param.Region.x)
  return x_;
}
void Region::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:iface.param.Region.x)
}

// int32 y = 2;
void Region::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Region::y() const {
  // @@protoc_insertion_point(field_get:iface.param.Region.y)
  return y_;
}
void Region::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:iface.param.Region.y)
}

// int32 width = 3;
void Region::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 Region::width() const {
  // @@protoc_insertion_point(field_get:iface.param.Region.width)
  return width_;
}
void Region::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:iface.param.Region.width)
}

// int32 height = 4;
void Region::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 Region::height() const {
  // @@protoc_insertion_point(field_get:iface.param.Region.height)
  return height_;
}
void Region::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:iface.param.Region.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Landmark::kPtsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Landmark::Landmark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_param_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iface.param.Landmark)
}
Landmark::Landmark(const Landmark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      pts_(from.pts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iface.param.Landmark)
}

void Landmark::SharedCtor() {
  _cached_size_ = 0;
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:iface.param.Landmark)
  SharedDtor();
}

void Landmark::SharedDtor() {
}

void Landmark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Landmark::descriptor() {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Landmark& Landmark::default_instance() {
  protobuf_param_2eproto::InitDefaults();
  return *internal_default_instance();
}

Landmark* Landmark::New(::google::protobuf::Arena* arena) const {
  Landmark* n = new Landmark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:iface.param.Landmark)
  pts_.Clear();
}

bool Landmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iface.param.Landmark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iface.param.Point pts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iface.param.Landmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iface.param.Landmark)
  return false;
#undef DO_
}

void Landmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iface.param.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iface.param.Point pts = 1;
  for (unsigned int i = 0, n = this->pts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pts(i), output);
  }

  // @@protoc_insertion_point(serialize_end:iface.param.Landmark)
}

::google::protobuf::uint8* Landmark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iface.param.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iface.param.Point pts = 1;
  for (unsigned int i = 0, n = this->pts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pts(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iface.param.Landmark)
  return target;
}

size_t Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iface.param.Landmark)
  size_t total_size = 0;

  // repeated .iface.param.Point pts = 1;
  {
    unsigned int count = this->pts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pts(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Landmark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iface.param.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  const Landmark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Landmark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iface.param.Landmark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iface.param.Landmark)
    MergeFrom(*source);
  }
}

void Landmark::MergeFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iface.param.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pts_.MergeFrom(from.pts_);
}

void Landmark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iface.param.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Landmark::CopyFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iface.param.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {
  return true;
}

void Landmark::Swap(Landmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Landmark::InternalSwap(Landmark* other) {
  pts_.InternalSwap(&other->pts_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Landmark::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Landmark

// repeated .iface.param.Point pts = 1;
int Landmark::pts_size() const {
  return pts_.size();
}
void Landmark::clear_pts() {
  pts_.Clear();
}
const ::iface::param::Point& Landmark::pts(int index) const {
  // @@protoc_insertion_point(field_get:iface.param.Landmark.pts)
  return pts_.Get(index);
}
::iface::param::Point* Landmark::mutable_pts(int index) {
  // @@protoc_insertion_point(field_mutable:iface.param.Landmark.pts)
  return pts_.Mutable(index);
}
::iface::param::Point* Landmark::add_pts() {
  // @@protoc_insertion_point(field_add:iface.param.Landmark.pts)
  return pts_.Add();
}
::google::protobuf::RepeatedPtrField< ::iface::param::Point >*
Landmark::mutable_pts() {
  // @@protoc_insertion_point(field_mutable_list:iface.param.Landmark.pts)
  return &pts_;
}
const ::google::protobuf::RepeatedPtrField< ::iface::param::Point >&
Landmark::pts() const {
  // @@protoc_insertion_point(field_list:iface.param.Landmark.pts)
  return pts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FacialDetectResponse::kRegionsFieldNumber;
const int FacialDetectResponse::kLandmarksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FacialDetectResponse::FacialDetectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_param_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iface.param.FacialDetectResponse)
}
FacialDetectResponse::FacialDetectResponse(const FacialDetectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      regions_(from.regions_),
      landmarks_(from.landmarks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:iface.param.FacialDetectResponse)
}

void FacialDetectResponse::SharedCtor() {
  _cached_size_ = 0;
}

FacialDetectResponse::~FacialDetectResponse() {
  // @@protoc_insertion_point(destructor:iface.param.FacialDetectResponse)
  SharedDtor();
}

void FacialDetectResponse::SharedDtor() {
}

void FacialDetectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacialDetectResponse::descriptor() {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FacialDetectResponse& FacialDetectResponse::default_instance() {
  protobuf_param_2eproto::InitDefaults();
  return *internal_default_instance();
}

FacialDetectResponse* FacialDetectResponse::New(::google::protobuf::Arena* arena) const {
  FacialDetectResponse* n = new FacialDetectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FacialDetectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iface.param.FacialDetectResponse)
  regions_.Clear();
  landmarks_.Clear();
}

bool FacialDetectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iface.param.FacialDetectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .iface.param.Region regions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .iface.param.Landmark landmarks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iface.param.FacialDetectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iface.param.FacialDetectResponse)
  return false;
#undef DO_
}

void FacialDetectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iface.param.FacialDetectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iface.param.Region regions = 1;
  for (unsigned int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->regions(i), output);
  }

  // repeated .iface.param.Landmark landmarks = 2;
  for (unsigned int i = 0, n = this->landmarks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->landmarks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:iface.param.FacialDetectResponse)
}

::google::protobuf::uint8* FacialDetectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iface.param.FacialDetectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .iface.param.Region regions = 1;
  for (unsigned int i = 0, n = this->regions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->regions(i), deterministic, target);
  }

  // repeated .iface.param.Landmark landmarks = 2;
  for (unsigned int i = 0, n = this->landmarks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->landmarks(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iface.param.FacialDetectResponse)
  return target;
}

size_t FacialDetectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iface.param.FacialDetectResponse)
  size_t total_size = 0;

  // repeated .iface.param.Region regions = 1;
  {
    unsigned int count = this->regions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regions(i));
    }
  }

  // repeated .iface.param.Landmark landmarks = 2;
  {
    unsigned int count = this->landmarks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->landmarks(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacialDetectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iface.param.FacialDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FacialDetectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FacialDetectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iface.param.FacialDetectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iface.param.FacialDetectResponse)
    MergeFrom(*source);
  }
}

void FacialDetectResponse::MergeFrom(const FacialDetectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iface.param.FacialDetectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
  landmarks_.MergeFrom(from.landmarks_);
}

void FacialDetectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iface.param.FacialDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacialDetectResponse::CopyFrom(const FacialDetectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iface.param.FacialDetectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacialDetectResponse::IsInitialized() const {
  return true;
}

void FacialDetectResponse::Swap(FacialDetectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FacialDetectResponse::InternalSwap(FacialDetectResponse* other) {
  regions_.InternalSwap(&other->regions_);
  landmarks_.InternalSwap(&other->landmarks_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FacialDetectResponse::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FacialDetectResponse

// repeated .iface.param.Region regions = 1;
int FacialDetectResponse::regions_size() const {
  return regions_.size();
}
void FacialDetectResponse::clear_regions() {
  regions_.Clear();
}
const ::iface::param::Region& FacialDetectResponse::regions(int index) const {
  // @@protoc_insertion_point(field_get:iface.param.FacialDetectResponse.regions)
  return regions_.Get(index);
}
::iface::param::Region* FacialDetectResponse::mutable_regions(int index) {
  // @@protoc_insertion_point(field_mutable:iface.param.FacialDetectResponse.regions)
  return regions_.Mutable(index);
}
::iface::param::Region* FacialDetectResponse::add_regions() {
  // @@protoc_insertion_point(field_add:iface.param.FacialDetectResponse.regions)
  return regions_.Add();
}
::google::protobuf::RepeatedPtrField< ::iface::param::Region >*
FacialDetectResponse::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:iface.param.FacialDetectResponse.regions)
  return &regions_;
}
const ::google::protobuf::RepeatedPtrField< ::iface::param::Region >&
FacialDetectResponse::regions() const {
  // @@protoc_insertion_point(field_list:iface.param.FacialDetectResponse.regions)
  return regions_;
}

// repeated .iface.param.Landmark landmarks = 2;
int FacialDetectResponse::landmarks_size() const {
  return landmarks_.size();
}
void FacialDetectResponse::clear_landmarks() {
  landmarks_.Clear();
}
const ::iface::param::Landmark& FacialDetectResponse::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:iface.param.FacialDetectResponse.landmarks)
  return landmarks_.Get(index);
}
::iface::param::Landmark* FacialDetectResponse::mutable_landmarks(int index) {
  // @@protoc_insertion_point(field_mutable:iface.param.FacialDetectResponse.landmarks)
  return landmarks_.Mutable(index);
}
::iface::param::Landmark* FacialDetectResponse::add_landmarks() {
  // @@protoc_insertion_point(field_add:iface.param.FacialDetectResponse.landmarks)
  return landmarks_.Add();
}
::google::protobuf::RepeatedPtrField< ::iface::param::Landmark >*
FacialDetectResponse::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:iface.param.FacialDetectResponse.landmarks)
  return &landmarks_;
}
const ::google::protobuf::RepeatedPtrField< ::iface::param::Landmark >&
FacialDetectResponse::landmarks() const {
  // @@protoc_insertion_point(field_list:iface.param.FacialDetectResponse.landmarks)
  return landmarks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimilarityParams::kFeat1FieldNumber;
const int SimilarityParams::kFeat2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimilarityParams::SimilarityParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_param_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iface.param.SimilarityParams)
}
SimilarityParams::SimilarityParams(const SimilarityParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feat1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.feat1().size() > 0) {
    feat1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feat1_);
  }
  feat2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.feat2().size() > 0) {
    feat2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feat2_);
  }
  // @@protoc_insertion_point(copy_constructor:iface.param.SimilarityParams)
}

void SimilarityParams::SharedCtor() {
  feat1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feat2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SimilarityParams::~SimilarityParams() {
  // @@protoc_insertion_point(destructor:iface.param.SimilarityParams)
  SharedDtor();
}

void SimilarityParams::SharedDtor() {
  feat1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feat2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SimilarityParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimilarityParams::descriptor() {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimilarityParams& SimilarityParams::default_instance() {
  protobuf_param_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimilarityParams* SimilarityParams::New(::google::protobuf::Arena* arena) const {
  SimilarityParams* n = new SimilarityParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimilarityParams::Clear() {
// @@protoc_insertion_point(message_clear_start:iface.param.SimilarityParams)
  feat1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feat2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SimilarityParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iface.param.SimilarityParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string feat1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feat1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feat1().data(), this->feat1().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "iface.param.SimilarityParams.feat1"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string feat2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feat2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->feat2().data(), this->feat2().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "iface.param.SimilarityParams.feat2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iface.param.SimilarityParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iface.param.SimilarityParams)
  return false;
#undef DO_
}

void SimilarityParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iface.param.SimilarityParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string feat1 = 1;
  if (this->feat1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feat1().data(), this->feat1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iface.param.SimilarityParams.feat1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->feat1(), output);
  }

  // string feat2 = 2;
  if (this->feat2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feat2().data(), this->feat2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iface.param.SimilarityParams.feat2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->feat2(), output);
  }

  // @@protoc_insertion_point(serialize_end:iface.param.SimilarityParams)
}

::google::protobuf::uint8* SimilarityParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iface.param.SimilarityParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string feat1 = 1;
  if (this->feat1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feat1().data(), this->feat1().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iface.param.SimilarityParams.feat1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->feat1(), target);
  }

  // string feat2 = 2;
  if (this->feat2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->feat2().data(), this->feat2().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "iface.param.SimilarityParams.feat2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->feat2(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iface.param.SimilarityParams)
  return target;
}

size_t SimilarityParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iface.param.SimilarityParams)
  size_t total_size = 0;

  // string feat1 = 1;
  if (this->feat1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feat1());
  }

  // string feat2 = 2;
  if (this->feat2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feat2());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimilarityParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iface.param.SimilarityParams)
  GOOGLE_DCHECK_NE(&from, this);
  const SimilarityParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimilarityParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iface.param.SimilarityParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iface.param.SimilarityParams)
    MergeFrom(*source);
  }
}

void SimilarityParams::MergeFrom(const SimilarityParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iface.param.SimilarityParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.feat1().size() > 0) {

    feat1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feat1_);
  }
  if (from.feat2().size() > 0) {

    feat2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feat2_);
  }
}

void SimilarityParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iface.param.SimilarityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimilarityParams::CopyFrom(const SimilarityParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iface.param.SimilarityParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimilarityParams::IsInitialized() const {
  return true;
}

void SimilarityParams::Swap(SimilarityParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimilarityParams::InternalSwap(SimilarityParams* other) {
  feat1_.Swap(&other->feat1_);
  feat2_.Swap(&other->feat2_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimilarityParams::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimilarityParams

// string feat1 = 1;
void SimilarityParams::clear_feat1() {
  feat1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SimilarityParams::feat1() const {
  // @@protoc_insertion_point(field_get:iface.param.SimilarityParams.feat1)
  return feat1_.GetNoArena();
}
void SimilarityParams::set_feat1(const ::std::string& value) {
  
  feat1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iface.param.SimilarityParams.feat1)
}
#if LANG_CXX11
void SimilarityParams::set_feat1(::std::string&& value) {
  
  feat1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iface.param.SimilarityParams.feat1)
}
#endif
void SimilarityParams::set_feat1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feat1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iface.param.SimilarityParams.feat1)
}
void SimilarityParams::set_feat1(const char* value, size_t size) {
  
  feat1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iface.param.SimilarityParams.feat1)
}
::std::string* SimilarityParams::mutable_feat1() {
  
  // @@protoc_insertion_point(field_mutable:iface.param.SimilarityParams.feat1)
  return feat1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SimilarityParams::release_feat1() {
  // @@protoc_insertion_point(field_release:iface.param.SimilarityParams.feat1)
  
  return feat1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SimilarityParams::set_allocated_feat1(::std::string* feat1) {
  if (feat1 != NULL) {
    
  } else {
    
  }
  feat1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feat1);
  // @@protoc_insertion_point(field_set_allocated:iface.param.SimilarityParams.feat1)
}

// string feat2 = 2;
void SimilarityParams::clear_feat2() {
  feat2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SimilarityParams::feat2() const {
  // @@protoc_insertion_point(field_get:iface.param.SimilarityParams.feat2)
  return feat2_.GetNoArena();
}
void SimilarityParams::set_feat2(const ::std::string& value) {
  
  feat2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iface.param.SimilarityParams.feat2)
}
#if LANG_CXX11
void SimilarityParams::set_feat2(::std::string&& value) {
  
  feat2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iface.param.SimilarityParams.feat2)
}
#endif
void SimilarityParams::set_feat2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  feat2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iface.param.SimilarityParams.feat2)
}
void SimilarityParams::set_feat2(const char* value, size_t size) {
  
  feat2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iface.param.SimilarityParams.feat2)
}
::std::string* SimilarityParams::mutable_feat2() {
  
  // @@protoc_insertion_point(field_mutable:iface.param.SimilarityParams.feat2)
  return feat2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SimilarityParams::release_feat2() {
  // @@protoc_insertion_point(field_release:iface.param.SimilarityParams.feat2)
  
  return feat2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SimilarityParams::set_allocated_feat2(::std::string* feat2) {
  if (feat2 != NULL) {
    
  } else {
    
  }
  feat2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feat2);
  // @@protoc_insertion_point(field_set_allocated:iface.param.SimilarityParams.feat2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimilarityResponse::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimilarityResponse::SimilarityResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_param_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:iface.param.SimilarityResponse)
}
SimilarityResponse::SimilarityResponse(const SimilarityResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:iface.param.SimilarityResponse)
}

void SimilarityResponse::SharedCtor() {
  score_ = 0;
  _cached_size_ = 0;
}

SimilarityResponse::~SimilarityResponse() {
  // @@protoc_insertion_point(destructor:iface.param.SimilarityResponse)
  SharedDtor();
}

void SimilarityResponse::SharedDtor() {
}

void SimilarityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimilarityResponse::descriptor() {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimilarityResponse& SimilarityResponse::default_instance() {
  protobuf_param_2eproto::InitDefaults();
  return *internal_default_instance();
}

SimilarityResponse* SimilarityResponse::New(::google::protobuf::Arena* arena) const {
  SimilarityResponse* n = new SimilarityResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimilarityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:iface.param.SimilarityResponse)
  score_ = 0;
}

bool SimilarityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:iface.param.SimilarityResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:iface.param.SimilarityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:iface.param.SimilarityResponse)
  return false;
#undef DO_
}

void SimilarityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:iface.param.SimilarityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float score = 1;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:iface.param.SimilarityResponse)
}

::google::protobuf::uint8* SimilarityResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:iface.param.SimilarityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float score = 1;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:iface.param.SimilarityResponse)
  return target;
}

size_t SimilarityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:iface.param.SimilarityResponse)
  size_t total_size = 0;

  // float score = 1;
  if (this->score() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimilarityResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:iface.param.SimilarityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SimilarityResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimilarityResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:iface.param.SimilarityResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:iface.param.SimilarityResponse)
    MergeFrom(*source);
  }
}

void SimilarityResponse::MergeFrom(const SimilarityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:iface.param.SimilarityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    set_score(from.score());
  }
}

void SimilarityResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:iface.param.SimilarityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimilarityResponse::CopyFrom(const SimilarityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:iface.param.SimilarityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimilarityResponse::IsInitialized() const {
  return true;
}

void SimilarityResponse::Swap(SimilarityResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimilarityResponse::InternalSwap(SimilarityResponse* other) {
  std::swap(score_, other->score_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimilarityResponse::GetMetadata() const {
  protobuf_param_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_param_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimilarityResponse

// float score = 1;
void SimilarityResponse::clear_score() {
  score_ = 0;
}
float SimilarityResponse::score() const {
  // @@protoc_insertion_point(field_get:iface.param.SimilarityResponse.score)
  return score_;
}
void SimilarityResponse::set_score(float value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:iface.param.SimilarityResponse.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace param
}  // namespace iface

// @@protoc_insertion_point(global_scope)
