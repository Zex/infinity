// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: facial.proto
// Original file comments:
// Parameter format
//
#ifndef GRPC_facial_2eproto__INCLUDED
#define GRPC_facial_2eproto__INCLUDED

#include "facial.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace iface {
namespace algo {

class Facial final {
 public:
  static constexpr char const* service_full_name() {
    return "iface.algo.Facial";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Detect facial regions and landmarks
    virtual ::grpc::Status FacialDetect(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::iface::param::FacialDetectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::FacialDetectResponse>> AsyncFacialDetect(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::FacialDetectResponse>>(AsyncFacialDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::FacialDetectResponse>> PrepareAsyncFacialDetect(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::FacialDetectResponse>>(PrepareAsyncFacialDetectRaw(context, request, cq));
    }
    // Extract feature from given image
    virtual ::grpc::Status ExtractFeature(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::iface::param::ExtractFeatureResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::ExtractFeatureResponse>> AsyncExtractFeature(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::ExtractFeatureResponse>>(AsyncExtractFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::ExtractFeatureResponse>> PrepareAsyncExtractFeature(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::ExtractFeatureResponse>>(PrepareAsyncExtractFeatureRaw(context, request, cq));
    }
    // Get similarity score of given features
    virtual ::grpc::Status Similarity(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::iface::param::SimilarityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::SimilarityResponse>> AsyncSimilarity(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::SimilarityResponse>>(AsyncSimilarityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::SimilarityResponse>> PrepareAsyncSimilarity(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::SimilarityResponse>>(PrepareAsyncSimilarityRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Detect facial regions and landmarks
      virtual void FacialDetect(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Extract feature from given image
      virtual void ExtractFeature(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get similarity score of given features
      virtual void Similarity(::grpc::ClientContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::FacialDetectResponse>* AsyncFacialDetectRaw(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::FacialDetectResponse>* PrepareAsyncFacialDetectRaw(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::ExtractFeatureResponse>* AsyncExtractFeatureRaw(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::ExtractFeatureResponse>* PrepareAsyncExtractFeatureRaw(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::SimilarityResponse>* AsyncSimilarityRaw(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::iface::param::SimilarityResponse>* PrepareAsyncSimilarityRaw(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status FacialDetect(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::iface::param::FacialDetectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::FacialDetectResponse>> AsyncFacialDetect(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::FacialDetectResponse>>(AsyncFacialDetectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::FacialDetectResponse>> PrepareAsyncFacialDetect(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::FacialDetectResponse>>(PrepareAsyncFacialDetectRaw(context, request, cq));
    }
    ::grpc::Status ExtractFeature(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::iface::param::ExtractFeatureResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::ExtractFeatureResponse>> AsyncExtractFeature(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::ExtractFeatureResponse>>(AsyncExtractFeatureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::ExtractFeatureResponse>> PrepareAsyncExtractFeature(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::ExtractFeatureResponse>>(PrepareAsyncExtractFeatureRaw(context, request, cq));
    }
    ::grpc::Status Similarity(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::iface::param::SimilarityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::SimilarityResponse>> AsyncSimilarity(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::SimilarityResponse>>(AsyncSimilarityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::SimilarityResponse>> PrepareAsyncSimilarity(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::iface::param::SimilarityResponse>>(PrepareAsyncSimilarityRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void FacialDetect(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response, std::function<void(::grpc::Status)>) override;
      void ExtractFeature(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response, std::function<void(::grpc::Status)>) override;
      void Similarity(::grpc::ClientContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::iface::param::FacialDetectResponse>* AsyncFacialDetectRaw(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iface::param::FacialDetectResponse>* PrepareAsyncFacialDetectRaw(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iface::param::ExtractFeatureResponse>* AsyncExtractFeatureRaw(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iface::param::ExtractFeatureResponse>* PrepareAsyncExtractFeatureRaw(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iface::param::SimilarityResponse>* AsyncSimilarityRaw(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::iface::param::SimilarityResponse>* PrepareAsyncSimilarityRaw(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_FacialDetect_;
    const ::grpc::internal::RpcMethod rpcmethod_ExtractFeature_;
    const ::grpc::internal::RpcMethod rpcmethod_Similarity_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Detect facial regions and landmarks
    virtual ::grpc::Status FacialDetect(::grpc::ServerContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response);
    // Extract feature from given image
    virtual ::grpc::Status ExtractFeature(::grpc::ServerContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response);
    // Get similarity score of given features
    virtual ::grpc::Status Similarity(::grpc::ServerContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_FacialDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FacialDetect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_FacialDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FacialDetect(::grpc::ServerContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFacialDetect(::grpc::ServerContext* context, ::iface::param::FacialDetectParams* request, ::grpc::ServerAsyncResponseWriter< ::iface::param::FacialDetectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ExtractFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ExtractFeature() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ExtractFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtractFeature(::grpc::ServerContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExtractFeature(::grpc::ServerContext* context, ::iface::param::ExtractFeatureParams* request, ::grpc::ServerAsyncResponseWriter< ::iface::param::ExtractFeatureResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Similarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Similarity() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Similarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Similarity(::grpc::ServerContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimilarity(::grpc::ServerContext* context, ::iface::param::SimilarityParams* request, ::grpc::ServerAsyncResponseWriter< ::iface::param::SimilarityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_FacialDetect<WithAsyncMethod_ExtractFeature<WithAsyncMethod_Similarity<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FacialDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_FacialDetect() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_FacialDetect<BaseClass>, ::iface::param::FacialDetectParams, ::iface::param::FacialDetectResponse>(
          [this](::grpc::ServerContext* context,
                 const ::iface::param::FacialDetectParams* request,
                 ::iface::param::FacialDetectResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->FacialDetect(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_FacialDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FacialDetect(::grpc::ServerContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FacialDetect(::grpc::ServerContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ExtractFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ExtractFeature() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_ExtractFeature<BaseClass>, ::iface::param::ExtractFeatureParams, ::iface::param::ExtractFeatureResponse>(
          [this](::grpc::ServerContext* context,
                 const ::iface::param::ExtractFeatureParams* request,
                 ::iface::param::ExtractFeatureResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ExtractFeature(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_ExtractFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtractFeature(::grpc::ServerContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ExtractFeature(::grpc::ServerContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Similarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Similarity() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithCallbackMethod_Similarity<BaseClass>, ::iface::param::SimilarityParams, ::iface::param::SimilarityResponse>(
          [this](::grpc::ServerContext* context,
                 const ::iface::param::SimilarityParams* request,
                 ::iface::param::SimilarityResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Similarity(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithCallbackMethod_Similarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Similarity(::grpc::ServerContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Similarity(::grpc::ServerContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_FacialDetect<ExperimentalWithCallbackMethod_ExtractFeature<ExperimentalWithCallbackMethod_Similarity<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_FacialDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FacialDetect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_FacialDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FacialDetect(::grpc::ServerContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ExtractFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ExtractFeature() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ExtractFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtractFeature(::grpc::ServerContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Similarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Similarity() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Similarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Similarity(::grpc::ServerContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_FacialDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FacialDetect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_FacialDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FacialDetect(::grpc::ServerContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFacialDetect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ExtractFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ExtractFeature() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ExtractFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtractFeature(::grpc::ServerContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExtractFeature(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Similarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Similarity() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Similarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Similarity(::grpc::ServerContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSimilarity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FacialDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_FacialDetect() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_FacialDetect<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->FacialDetect(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_FacialDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FacialDetect(::grpc::ServerContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FacialDetect(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ExtractFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ExtractFeature() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_ExtractFeature<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ExtractFeature(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_ExtractFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ExtractFeature(::grpc::ServerContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ExtractFeature(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Similarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Similarity() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ExperimentalWithRawCallbackMethod_Similarity<BaseClass>, ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Similarity(context, request, response, controller);
                 }, this));
    }
    ~ExperimentalWithRawCallbackMethod_Similarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Similarity(::grpc::ServerContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Similarity(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FacialDetect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FacialDetect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::iface::param::FacialDetectParams, ::iface::param::FacialDetectResponse>(std::bind(&WithStreamedUnaryMethod_FacialDetect<BaseClass>::StreamedFacialDetect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FacialDetect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FacialDetect(::grpc::ServerContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFacialDetect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::iface::param::FacialDetectParams,::iface::param::FacialDetectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ExtractFeature : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ExtractFeature() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::iface::param::ExtractFeatureParams, ::iface::param::ExtractFeatureResponse>(std::bind(&WithStreamedUnaryMethod_ExtractFeature<BaseClass>::StreamedExtractFeature, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ExtractFeature() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ExtractFeature(::grpc::ServerContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExtractFeature(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::iface::param::ExtractFeatureParams,::iface::param::ExtractFeatureResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Similarity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Similarity() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::iface::param::SimilarityParams, ::iface::param::SimilarityResponse>(std::bind(&WithStreamedUnaryMethod_Similarity<BaseClass>::StreamedSimilarity, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Similarity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Similarity(::grpc::ServerContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSimilarity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::iface::param::SimilarityParams,::iface::param::SimilarityResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_FacialDetect<WithStreamedUnaryMethod_ExtractFeature<WithStreamedUnaryMethod_Similarity<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_FacialDetect<WithStreamedUnaryMethod_ExtractFeature<WithStreamedUnaryMethod_Similarity<Service > > > StreamedService;
};

}  // namespace algo
}  // namespace iface


#endif  // GRPC_facial_2eproto__INCLUDED
