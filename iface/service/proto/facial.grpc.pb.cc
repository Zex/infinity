// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: facial.proto

#include "facial.pb.h"
#include "facial.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace iface {
namespace algo {

static const char* Facial_method_names[] = {
  "/iface.algo.Facial/FacialDetect",
  "/iface.algo.Facial/ExtractFeature",
  "/iface.algo.Facial/Similarity",
};

std::unique_ptr< Facial::Stub> Facial::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Facial::Stub> stub(new Facial::Stub(channel));
  return stub;
}

Facial::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FacialDetect_(Facial_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExtractFeature_(Facial_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Similarity_(Facial_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Facial::Stub::FacialDetect(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::iface::param::FacialDetectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FacialDetect_, context, request, response);
}

void Facial::Stub::experimental_async::FacialDetect(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FacialDetect_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::iface::param::FacialDetectResponse>* Facial::Stub::AsyncFacialDetectRaw(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::iface::param::FacialDetectResponse>::Create(channel_.get(), cq, rpcmethod_FacialDetect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::iface::param::FacialDetectResponse>* Facial::Stub::PrepareAsyncFacialDetectRaw(::grpc::ClientContext* context, const ::iface::param::FacialDetectParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::iface::param::FacialDetectResponse>::Create(channel_.get(), cq, rpcmethod_FacialDetect_, context, request, false);
}

::grpc::Status Facial::Stub::ExtractFeature(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::iface::param::ExtractFeatureResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExtractFeature_, context, request, response);
}

void Facial::Stub::experimental_async::ExtractFeature(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExtractFeature_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::iface::param::ExtractFeatureResponse>* Facial::Stub::AsyncExtractFeatureRaw(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::iface::param::ExtractFeatureResponse>::Create(channel_.get(), cq, rpcmethod_ExtractFeature_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::iface::param::ExtractFeatureResponse>* Facial::Stub::PrepareAsyncExtractFeatureRaw(::grpc::ClientContext* context, const ::iface::param::ExtractFeatureParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::iface::param::ExtractFeatureResponse>::Create(channel_.get(), cq, rpcmethod_ExtractFeature_, context, request, false);
}

::grpc::Status Facial::Stub::Similarity(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::iface::param::SimilarityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Similarity_, context, request, response);
}

void Facial::Stub::experimental_async::Similarity(::grpc::ClientContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Similarity_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::iface::param::SimilarityResponse>* Facial::Stub::AsyncSimilarityRaw(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::iface::param::SimilarityResponse>::Create(channel_.get(), cq, rpcmethod_Similarity_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::iface::param::SimilarityResponse>* Facial::Stub::PrepareAsyncSimilarityRaw(::grpc::ClientContext* context, const ::iface::param::SimilarityParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::iface::param::SimilarityResponse>::Create(channel_.get(), cq, rpcmethod_Similarity_, context, request, false);
}

Facial::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Facial_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Facial::Service, ::iface::param::FacialDetectParams, ::iface::param::FacialDetectResponse>(
          std::mem_fn(&Facial::Service::FacialDetect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Facial_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Facial::Service, ::iface::param::ExtractFeatureParams, ::iface::param::ExtractFeatureResponse>(
          std::mem_fn(&Facial::Service::ExtractFeature), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Facial_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Facial::Service, ::iface::param::SimilarityParams, ::iface::param::SimilarityResponse>(
          std::mem_fn(&Facial::Service::Similarity), this)));
}

Facial::Service::~Service() {
}

::grpc::Status Facial::Service::FacialDetect(::grpc::ServerContext* context, const ::iface::param::FacialDetectParams* request, ::iface::param::FacialDetectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Facial::Service::ExtractFeature(::grpc::ServerContext* context, const ::iface::param::ExtractFeatureParams* request, ::iface::param::ExtractFeatureResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Facial::Service::Similarity(::grpc::ServerContext* context, const ::iface::param::SimilarityParams* request, ::iface::param::SimilarityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace iface
}  // namespace algo

